package crux;

import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Stack;

import ast.Command;

public class Parser {
	public static String studentName = "Lamar West";
	public static String studentID = "79872428";
	public static String uciNetID = "westl";


	// SymbolTable Management ==========================
	private SymbolTable symbolTable;

	private void initSymbolTable()
	{
		this.symbolTable = new SymbolTable();
	}

	private void enterScope()
	{
		symbolTable.table.push(new LinkedHashMap<String,Symbol>());
	}

	private void exitScope()
	{
		symbolTable.table.pop();
	}

	private Symbol tryResolveSymbol(Token ident)
	{
		assert(ident.is(Token.Kind.IDENTIFIER));
		String name = ident.lexeme();
		try {
			return symbolTable.lookup(name);
		} catch (SymbolNotFoundError e) {
			String message = reportResolveSymbolError(name, ident.lineNumber(), ident.charPosition());
			return new ErrorSymbol(message);
		}
	}

	private String reportResolveSymbolError(String name, int lineNum, int charPos)
	{
		String message = "ResolveSymbolError(" + lineNum + "," + charPos + ")[Could not find " + name + ".]";
		errorBuffer.append(message + "\n");
		errorBuffer.append(symbolTable.toString() + "\n");
		return message;
	}

	private Symbol tryDeclareSymbol(Token ident)
	{
		assert(ident.is(Token.Kind.IDENTIFIER));
		String name = ident.lexeme();
		try {
			return symbolTable.insert(name);
		} catch (RedeclarationError re) {
			String message = reportDeclareSymbolError(name, ident.lineNumber(), ident.charPosition());
			return new ErrorSymbol(message);
		}
	}

	private String reportDeclareSymbolError(String name, int lineNum, int charPos)
	{
		String message = "DeclareSymbolError(" + lineNum + "," + charPos + ")[" + name + " already exists.]";
		errorBuffer.append(message + "\n");
		errorBuffer.append(symbolTable.toString() + "\n");
		return message;
	}    
	// Parser ==========================================

	private Scanner scanner;
	private Token currentToken;

	public Parser(Scanner scanner) throws IOException
	{
		this.scanner = scanner;
		this.currentToken = scanner.next();
	}


	public ast.Command parse()
	{
		initSymbolTable();
		try {
			return program();
		} catch (QuitParseException q) {
			return new ast.Error(lineNumber(), charPosition(), "Could not complete parsing.");
		}
	}

	// Error Reporting ==========================================
	private StringBuffer errorBuffer = new StringBuffer();

	private String reportSyntaxError(NonTerminal nt)
	{
		String message = "SyntaxError(" + lineNumber() + "," + charPosition() + ")[Expected a token from " + nt.name() + " but got " + currentToken.getKind().name() + ".]";
		errorBuffer.append(message + "\n");
		return message;
	}

	private String reportSyntaxError(Token.Kind kind)
	{
		String message = "SyntaxError(" + lineNumber() + "," + charPosition() + ")[Expected " + kind.name() + " but got " + currentToken.getKind().name() + ".]";
		errorBuffer.append(message + "\n");
		return message;
	}

	public String errorReport()
	{
		return errorBuffer.toString();
	}

	public boolean hasError()
	{
		return errorBuffer.length() != 0;
	}

	private class QuitParseException extends RuntimeException
	{
		private static final long serialVersionUID = 1L;
		public QuitParseException(String errorMessage) {
			super(errorMessage);
		}
	}


	private int lineNumber()
	{
		return currentToken.lineNumber();
	}

	private int charPosition()
	{
		return currentToken.charPosition();
	}

	// Helper Methods ==========================================
	 private Token expectRetrieve(Token.Kind kind) throws IOException
	    {
	        Token tok = currentToken;
	        if (accept(kind))
	            return tok;
	        String errorMessage = reportSyntaxError(kind);
	        throw new QuitParseException(errorMessage);
	        //return ErrorToken(errorMessage);
	    }
	        
	    private Token expectRetrieve(NonTerminal nt) throws IOException
	    {
	        Token tok = currentToken;
	        if (accept(nt))
	            return tok;
	        String errorMessage = reportSyntaxError(nt);
	        throw new QuitParseException(errorMessage);
	        //return ErrorToken(errorMessage);
	    }
	 	private boolean have(Token.Kind kind)
	 	{
	 		return currentToken.is(kind);
	 	}

	 	private boolean have(NonTerminal nt)
	 	{
	 		return nt.firstSet().contains(currentToken.getKind());
	 	}

	 	private boolean accept(Token.Kind kind) throws IOException
	 	{
	 		if (have(kind)) {
	 			currentToken = scanner.next();
	 			return true;
	 		}
	 		return false;
	 	}    

	 	private boolean accept(NonTerminal nt) throws IOException
	 	{
	 		if (have(nt)) {
	 			currentToken = scanner.next();
	 			return true;
	 		}
	 		return false;
	 	}

	 	private boolean expect(Token.Kind kind) throws IOException
	 	{
	 		if (accept(kind))
	 			return true;
	 		reportError(kind);
	 		//return false;
	 		return false;
	 	}

	 	private boolean expect(NonTerminal nt) throws IOException 
	 	{
	 		if (accept(nt))
	 			return true;
	 		reportError(nt);
	 		return false;
	 	}
	 	private void reportError(NonTerminal nt)throws IOException{
	 		String errorMessage = reportSyntaxError(nt);
	 		throw new QuitParseException(errorMessage);
	 	}
	 	private void reportError(Token.Kind kind) throws IOException{
	 		String errorMessage = reportSyntaxError(kind);
	 		throw new QuitParseException(errorMessage);
	 	}
	// Grammar Rules =====================================================

	// literal := INTEGER | FLOAT | TRUE | FALSE .
	public ast.Expression literal()
	{
		ast.Expression expr;
		enterRule(NonTerminal.LITERAL);

		Token tok = expectRetrieve(NonTerminal.LITERAL);
		Expression expr = Command.newLiteral(tok);

		exitRule(NonTerminal.LITERAL);
		return expr;
	}

	// program := declaration-list EOF .
	public ast.DeclarationList program()
	{
		throw new RuntimeException("add code to each grammar rule, to build as ast.");
	}


}
