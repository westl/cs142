package crux;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

import ast.Command;

public class Parser {
    public static String studentName = "TODO: Your Name";
    public static String studentID = "TODO: Your 8-digit id";
    public static String uciNetID = "TODO: uci-net id";
    
// Parser ==========================================
   
    public Parser(Scanner s) {
		// TODO Auto-generated constructor stub
	}

	public ast.Command parse()
    {
        initSymbolTable();
        try {
            return program();
        } catch (QuitParseException q) {
            return new ast.Error(lineNumber(), charPosition(), "Could not complete parsing.");
        }
    }
    
	// Error Reporting ==========================================
	 	private StringBuffer errorBuffer = new StringBuffer();

	 	private String reportSyntaxError(NonTerminal nt)
	 	{
	 		String message = "SyntaxError(" + lineNumber() + "," + charPosition() + ")[Expected a token from " + nt.name() + " but got " + currentToken.getKind().name() + ".]";
	 		errorBuffer.append(message + "\n");
	 		return message;
	 	}

	 	private String reportSyntaxError(Token.Kind kind)
	 	{
	 		String message = "SyntaxError(" + lineNumber() + "," + charPosition() + ")[Expected " + kind.name() + " but got " + currentToken.getKind().name() + ".]";
	 		errorBuffer.append(message + "\n");
	 		return message;
	 	}

	 	public String errorReport()
	 	{
	 		return errorBuffer.toString();
	 	}

	 	public boolean hasError()
	 	{
	 		return errorBuffer.length() != 0;
	 	}

	 	private class QuitParseException extends RuntimeException
	 	{
	 		private static final long serialVersionUID = 1L;
	 		public QuitParseException(String errorMessage) {
	 			super(errorMessage);
	 		}
	 	}


	 	private int lineNumber()
	 	{
	 		return currentToken.lineNumber();
	 	}

	 	private int charPosition()
	 	{
	 		return currentToken.charPosition();
	 	}

// Helper Methods ==========================================
    private boolean have(Token.Kind kind)
    {
        return currentToken.is(kind);
    }
    
    private boolean have(NonTerminal nt)
    {
        return nt.firstSet().contains(currentToken.kind());
    }
    
    private boolean accept(Token.Kind kind)
    {
        if (have(kind)) {
            currentToken = scanner.next();
            return true;
        }
        return false;
    }    
    
    private boolean accept(NonTerminal nt)
    {
        if (have(nt)) {
            currentToken = scanner.next();
            return true;
        }
        return false;
    }

    private boolean expect(token.kind kind)
    {
        if (accept(kind))
            return true;
        string errormessage = reportsyntaxerror(kind);
        throw new quitparseexception(errormessage);
        //return false;
    }
        
    private boolean expect(nonterminal nt)
    {
        if (accept(nt))
            return true;
        string errormessage = reportsyntaxerror(nt);
        throw new QuitParseException(errorMessage);
        //return false;
    }
     
    private Token expectRetrieve(Token.Kind kind)
    {
        Token tok = currentToken;
        if (accept(kind))
            return tok;
        String errorMessage = reportSyntaxError(kind);
        throw new QuitParseException(errorMessage);
        //return ErrorToken(errorMessage);
    }
        
    private Token expectRetrieve(NonTerminal nt)
    {
        Token tok = currentToken;
        if (accept(nt))
            return tok;
        String errorMessage = reportSyntaxError(nt);
        throw new QuitParseException(errorMessage);
        //return ErrorToken(errorMessage);
    }
   
// Grammar Rules =====================================================
    
    // literal := INTEGER | FLOAT | TRUE | FALSE .
    public ast.Expression literal()
    {
        ast.Expression expr;
        enterRule(NonTerminal.LITERAL);
        
        Token tok = expectRetrieve(NonTerminal.LITERAL);
        Expression expr = Command.newLiteral(tok);
        
        exitRule(NonTerminal.LITERAL);
        return expr;
    }

    // program := declaration-list EOF .
    public ast.DeclarationList program()
    {
        throw new RuntimeException("add code to each grammar rule, to build as ast.");
    }

    
}
