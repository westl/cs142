package crux;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintStream;

public class Compiler {
    public static String studentName = "TODO: Your Name";
    public static String studentID = "TODO: Your 8-digit id";
    public static String uciNetID = "TODO: uci-net id";
    
    public static void main(String[] args)
    {
        String sourceFilename = args[0];
        
        Scanner s = null;
        try {
            s = new Scanner(new FileReader(sourceFilename));
        } catch (IOException e) {
            e.printStackTrace();
            System.err.println("Error accessing the source file: \"" + sourceFilename + "\"");
            System.exit(-2);
        }
        //The parser handles grammar rules
        // a rule explains how the grammar is set up
        // a rule consists of terminals and non-terminals
        // terminals are literals that cannot be changes, but are also output from a program
        // non-terminals are objects that can be replaced 
        // for example a rule looks like : Expression --> Expression + 'A'
        // this means that the non-terminal 'Expression' can be explained by a Expression plus
        // a terminal 'A' . 
        // Parser would be able to tell if any given Expression is a real one. 
        // Left recursion only happens when there is an option such as '|' then left 
        // recursion can happen and an infinite loop can be possible. 
        Parser p = new Parser(s);
        p.parse();
        if (p.hasError()) {
            System.out.println("Error parsing file.");
            System.out.println(p.errorReport());
            System.exit(-3);
        }
        System.out.println(p.parseTreeReport());
    }
}
    
